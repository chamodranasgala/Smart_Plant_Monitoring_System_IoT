/* Connections
Relay. D3
Btn.   D7
Soil.  A0
PIR.   D5
SDA.   D2
SCL.   D1
Temp.  D4
*/

#define BLYNK_TEMPLATE_ID "TMPL6T9CK7TMb"
#define BLYNK_TEMPLATE_NAME "Smart Plant Monitoring System"

#define BLYNK_PRINT Serial

//Include the library files
#include <Adafruit_Sensor.h>
#include <BlynkSimpleEsp8266.h>
#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <DHT.h>

//Initialize the LCD display
LiquidCrystal_I2C lcd(0x27, 16, 2);

char auth[] = "SevJgXdAM_H6nmX3og77IhFSBLLUOmdX";  // Blynk Auth token
char pass[] = "D28633ee11";  // WIFI Password

// WiFi
const char *ssid = "Chamod's iPhone";
const char *password = "D28633ee11";

// MQTT Broker
const char *mqtt_broker = "broker.emqx.io";
const char *mqtt_username = "emqx";
const char *mqtt_password = "public";
const int mqtt_port = 1883;

WiFiClient espClient;
PubSubClient client(espClient);


DHT dht(D4, DHT11);//(DHT sensor pin,sensor type)  D4 DHT11 Temperature Sensor
BlynkTimer timer;

#define soil A0
#define PIR D5
int PIR_ToggleValue;

void checkPhysicalButton();
int relay1State = LOW;
int pushButton1State = HIGH;
#define RELAY_PIN_1       D3   //D3 Relay
#define PUSH_BUTTON_1     D7   //D7 Button
#define VPIN_BUTTON_1    V12

const char *temperatureTopic = "esp8266/temperature";
const char *humidityTopic = "esp8266/humidity";
const char *soilMoistureTopic = "esp8266/soil_moisture";
const char *motionDetectionTopic = "esp8266/motion_detection";

void setup() {
  Serial.begin(115200);

  connectToWiFi();
  connectToMQTT();

  pinMode(PIR, INPUT);
  dht.begin();

  Wire.begin(D2, D1);
  lcd.init();
  lcd.backlight();

  pinMode(RELAY_PIN_1, OUTPUT);
  digitalWrite(RELAY_PIN_1, LOW);
  pinMode(PUSH_BUTTON_1, INPUT_PULLUP);
  digitalWrite(RELAY_PIN_1, relay1State);

  Blynk.begin(auth, ssid, pass, "blynk.cloud", 80);
  dht.begin();

  lcd.setCursor(0, 0);
  lcd.print("  Initializing  ");
  for (int a = 5; a <= 10; a++) {
    lcd.setCursor(a, 1);
    lcd.print(".");
    delay(500);
  }
  lcd.clear();
  lcd.setCursor(11, 1);
  lcd.print("W:OFF");
  
  //Call the function
  timer.setInterval(100L, soilMoistureSensorB);
  timer.setInterval(100L, DHT11sensor);
  timer.setInterval(500L, checkPhysicalButton);
}

void connectToWiFi() {
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.println("Connecting to WiFi..");
  }
  Serial.println("Connected to the WiFi network");
}

void connectToMQTT() {
  client.setServer(mqtt_broker, mqtt_port);
  while (!client.connected()) {
    String client_id = "esp8266-client-";
    client_id += String(WiFi.macAddress());
    Serial.printf("The client %s connects to the public mqtt broker\n", client_id.c_str());
    if (client.connect(client_id.c_str(), mqtt_username, mqtt_password)) {
      Serial.println("Public emqx mqtt broker connected");
    } else {
      Serial.print("failed with state ");
      Serial.print(client.state());
      delay(2000);
    }
  }
}

void DHT11sensor() {
  float h = dht.readHumidity();
  float t = dht.readTemperature();

  if (isnan(h) || isnan(t)) {
    Serial.println("Failed to read from DHT sensor!");
    return;
  }

  client.publish(temperatureTopic, String(t, 1).c_str());
  client.publish(humidityTopic, String(h, 1).c_str());

  lcd.setCursor(0, 0);
  lcd.print("T:");
  lcd.print(t);

  lcd.setCursor(8, 0);
  lcd.print("H:");
  lcd.print(h);

  Blynk.virtualWrite(V0, t);
  Blynk.virtualWrite(V1, h);
}

void PIRsensor(){
  bool motionDetected = digitalRead(PIR);
  if (motionDetected) {
    client.publish(motionDetectionTopic, "1"); // Publish "1" when motion is detected
  } else {
    client.publish(motionDetectionTopic, "0"); // Publish "0" when no motion is detected
  }

  delay(1000); // Adjust the delay to control the publishing rate
  client.loop();

}

void PIRsensorB() {

  bool value = digitalRead(PIR);
  if (value) {
    Blynk.logEvent("pirmotion","WARNNG! Motion Detected!"); // Event Name
    WidgetLED LED(V5);
    LED.on();
  } else {
    WidgetLED LED(V5);
    LED.off();
  }
}

void PIRsensorBM() {
    if (PIR_ToggleValue == 1)
    {
    lcd.setCursor(5, 1);
    lcd.print("M:ON ");
      PIRsensorB();
      }
     else
     {
    lcd.setCursor(5, 1);
    lcd.print("M:OFF");
    WidgetLED LED(V5);
    LED.off();
     }
}

void soilMoistureSensor() {
  int value = analogRead(soil);
  value = map(value, 0, 1024, 0, 100);
  value = (value - 100) * -1;
  client.publish(soilMoistureTopic, String(value).c_str());
}

void soilMoistureSensorB() {
  int value = analogRead(soil);
  value = map(value, 0, 1024, 0, 100);
  value = (value - 100) * -1;

  Blynk.virtualWrite(V3, value);
  
  lcd.setCursor(0, 1);
  lcd.print("S:");
  lcd.print(value);
  lcd.print(" ");
}


void relay(){
    if (relay1State == HIGH)
  {
    lcd.setCursor(11, 1);
    lcd.print("W:OFF ");
    }
    else if (relay1State == LOW)
    {
      lcd.setCursor(11, 1);
      lcd.print("W:ON ");
    }
}


BLYNK_WRITE(V6)
{
 PIR_ToggleValue = param.asInt();  
}


BLYNK_CONNECTED() {
  // Request the latest state from the server
  Blynk.syncVirtual(VPIN_BUTTON_1);
}

BLYNK_WRITE(VPIN_BUTTON_1) {
  relay1State = param.asInt();
  digitalWrite(RELAY_PIN_1, relay1State);
}

void checkPhysicalButton()
{
  if (digitalRead(PUSH_BUTTON_1) == LOW) {
    // pushButton1State is used to avoid sequential toggles
    if (pushButton1State != LOW) {

      // Toggle Relay state
      relay1State = !relay1State;
      digitalWrite(RELAY_PIN_1, relay1State);

      // Update Button Widget
      Blynk.virtualWrite(VPIN_BUTTON_1, relay1State);
    }
    pushButton1State = LOW;
  } else {
    pushButton1State = HIGH;
  }
}

void loop() {
  if (!client.connected()) {
    connectToMQTT();
  }

  PIRsensor();
  PIRsensorBM();

  DHT11sensor();

  soilMoistureSensor();
  soilMoistureSensorB();

  relay();
      
  Blynk.run();//Run the Blynk library
  timer.run();//Run the Blynk timer
}
